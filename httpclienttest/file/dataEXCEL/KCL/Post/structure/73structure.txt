STRUCTURE OVERVIEW
     
  Core programme content
   Individual Research Project.

     
   Indicative non-core content
   The following modules are compulsory:
Research Methods and Advanced Topics in Complex Systems
Theory of Complex Networks.

Students also choose optional modules from the following list:
Advanced Reading Module in Mathematics
Algorithms Design    Analysis
Algorithms for Computational Molecular Biology
Applied Probability  and Stochastics
Bio- and Nanomaterials in the Virtual Lab
Dynamical Analysis of Complex Systems
Elements of Statistical Learning
Equilibrium Analysis of Complex Systems
Mathematical Biology
Risk in Finance
Statistics in Finance
Statistics for Bioinformatics.

     
   
   FORMAT AND ASSESSMENT
  Primarily written examinations, some with coursework element,  in eight lecture modules, plus an oral presentation and assessed report on the research project.
   
   MODULES
   More information on typical programme modules.
   NB it cannot be guaranteed that all modules are offered in any particular academic year.
    
  
    
    
    
    
   
    
    
    
    
  
  
  
  
    
      Algorithm Design   Analysis - Optional

    
  
      
     Module code:  
7CCSMADA    
  
    Credit level:  
7  
    Credit value:  
15  
  
  
      Semester:  
    Semester 1 (autumn)     
   
    
  
       
    
     
  Aims
To introduce strategies for the design of algorithms which are efficient in terms of time and space requirements.
Learning Outcomes
On successfully completing this module you should understand the basic techniques for designing algorithms for fundamental computational problems.
Provisional Syllabus
Introduction:
Algorithms and computational complexity
Asymptotic notation
Pseudocode
Algorithm design techniques:
Divide-and-Conquer: Quicksort
Dynamic programming: matrix chain multiplication
Greedy algorithms: Huffman codes
Order statistics:
Selecting the k-th smallest element of a list - a practical method
Selecting the k-th smallest element of a list - an optimal method
Lower bound on the time complexity of computing the median
Data structures for set manipulation problems:
Fundamental operations on sets
The union-find algorithm
Partitioning
Representations of directed and undirected graphs:
Adjacency-matrix and adjacency-list representations
Breadth-first and depth-first search using adjacency lists
Computing connected components of a graph
Strongly-connected and biconnected components
Topological sorting
Algebraic algorithms:
Strassen matrix multiplication algorithm
The Four Russians boolean matrix multiplication
Winograd's algorithm
LUP decomposition of matrices
Applications of LUP decomposition
Integer and polynomial arithmetic:
Integer and polynomial multiplication and division
Greatest common divisors and Euclid's algorithm
Chinese remaindering

  
    Algorithms For Computational Molecular Biology - Optional

    
  
      
     Module code:  
7CCSMCMB    
  
    Credit level:  
7  
    Credit value:  
15  
  
  
      Semester:  
    Semester 2 (spring)     
   
    
  
       
    
     
  Aims
To understand the major concepts and problems of computational molecular biology. To appreciate the importance of these concepts in a wide diversity of practical applications. To learn which of the computational molecular biology problems have efficient algorithmic solutions and which are intractable (for example, which belong to the NP-complete complexity class). For some intractable problems, to understand how heuristic approaches to problem solutions may yield fast but only approximate solutions.
Learning Outcomes
On completing the module you should be able to design exact and efficient algorithms as well as approximation schemes and heuristics for some of the most important algorithms underlying the field of computational molecular biology, or bioinformatics. You will also be able to reason why efficient algorithms for certain problems might not be possible.
Provisional Syllabus
Basic concepts: Definitions and notions from Molecular Biology; DNA Sequence Analysis
Alignement:
Hamming and Levenshtein distances
Dynamic programming algorithm
Hirschberg's algorithm
Substitution matrices (BLOSSUM, PAM) and scoring
Seq vs Seq (Fasta, Dynamic Programming)
Seq vs Databank (BLAST)
Whole genome alignment
Multiple sequence alignment
Approximate string matching:
String matching with "don't cares"
Searching with differences
Searching with mismatches
Fragment assembly:
Shotgun sequencing
Gene detection:
Regular expressions, acceptor and donor sites
Alternative splicing
Secondary structure prediction:
RNA structure
Minimal free energy (Zuker's approach)
Protein Folding
Phylogeny:
Mapping and rearrangements
Clustering and classification techniques